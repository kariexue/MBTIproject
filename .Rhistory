dr_estFUN <- function(data, models) {
X <- data$X
Y <- data$Y
Xe <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$e))
# Xm0 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m0))
# Xm1 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m1))
Xm <- grab_design_matrix(data=data, rhs_formula = grab_fixed_formula(models$m))
e_pos <- 1:ncol(Xe)
m_pos <- (max(e_pos)+1):(max(e_pos)+ncol(Xm))
#m0_pos <- (max(e_pos) + 1):(max(e_pos) + ncol(Xm0))
#m1_pos <- (max(m0_pos) + 1):(max(m0_pos) + ncol(Xm1))
e_scores <- grab_psiFUN(models$e, data)
m_scores <- grab_psiFUN(models$m, data)
#m0_scores <- grab_psiFUN(models$m0, data)
#m1_scores <- grab_psiFUN(models$m1, data)
function(theta) {
e <- plogis(Xe %*% theta[e_pos])
theta0 <- theta
theta0[6] = 0
m0 <- Xm %*% theta0[m_pos]
m1 <- Xm %*% theta[m_pos]
rd_hat <- (X * Y - (X - e) * m1) / e-((1 - X) * Y - (X - e) * m0) / (1 - e)
c(
e_scores(theta[e_pos]),m_scores(theta[m_pos]), rd_hat - theta[length(theta)]
# c(
#   e_scores(theta[e_pos]),m0_scores(theta[m0_pos]) * (X == 0),m1_scores(theta[m1_pos]) * (X == 1),rd_hat - theta[length(theta)]
)
}
}
estimate_dr <- function(data, propensity_formula, outcome_formula) {
e_model <- glm(propensity_formula, data = data, family = binomial)
m_model <- glm(outcome_formula, data=data)
#m0_model <- glm(outcome_formula, subset = (X == 0), data = data)
#m1_model <- glm(outcome_formula, subset = (X == 1), data = data)
models <- list(e=e_model, m=m_model)
#models <- list(e = e_model, m0 = m0_model, m1 = m1_model)
#nparms <- sum(unlist(lapply(models, function(x) length(coef(x))))) + 1
allroots <- c(coef(e_model),coef(m_model),0)
#allroots[5]=allroots[6]
allroots[6]=1
m_estimate(estFUN = dr_estFUN, data = data,
roots = allroots,
compute_roots = FALSE,
#root_control = setup_root_control(start = rep(0, nparms)),
outer_args = list(models = models))
}
ACEreal=0
simdat2 = getdata(ACE=0, num.part=500)
geex_results <- estimate_dr(simdat2, X~Z1+Z2+Z3, Y~X+Z1+Z3+Z4)
L <- c(b0,b1,b2,b3,b0,1,b1,b3,b4,ACEreal)
Sigma <- vcov(geex_results)
sqrt(t(L) %*% Sigma %*% L)  # from GEEX
library(geex)
dr_estFUN <- function(data, models) {
X <- data$X
Y <- data$Y
Xe <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$e))
# Xm0 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m0))
# Xm1 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m1))
Xm <- grab_design_matrix(data=data, rhs_formula = grab_fixed_formula(models$m))
e_pos <- 1:ncol(Xe)
m_pos <- (max(e_pos)+1):(max(e_pos)+ncol(Xm))
#m0_pos <- (max(e_pos) + 1):(max(e_pos) + ncol(Xm0))
#m1_pos <- (max(m0_pos) + 1):(max(m0_pos) + ncol(Xm1))
e_scores <- grab_psiFUN(models$e, data)
m_scores <- grab_psiFUN(models$m, data)
#m0_scores <- grab_psiFUN(models$m0, data)
#m1_scores <- grab_psiFUN(models$m1, data)
function(theta) {
e <- plogis(Xe %*% theta[e_pos])
theta0 <- theta
theta0[6] = 0
m0 <- Xm %*% theta0[m_pos]
m1 <- Xm %*% theta[m_pos]
rd_hat <- (X * Y - (X - e) * m1) / e-((1 - X) * Y - (X - e) * m0) / (1 - e)
c(
e_scores(theta[e_pos]),m_scores(theta[m_pos]), rd_hat - theta[length(theta)]
# c(
#   e_scores(theta[e_pos]),m0_scores(theta[m0_pos]) * (X == 0),m1_scores(theta[m1_pos]) * (X == 1),rd_hat - theta[length(theta)]
)
}
}
estimate_dr <- function(data, propensity_formula, outcome_formula) {
e_model <- glm(propensity_formula, data = data, family = binomial)
m_model <- glm(outcome_formula, data=data)
#m0_model <- glm(outcome_formula, subset = (X == 0), data = data)
#m1_model <- glm(outcome_formula, subset = (X == 1), data = data)
models <- list(e=e_model, m=m_model)
#models <- list(e = e_model, m0 = m0_model, m1 = m1_model)
#nparms <- sum(unlist(lapply(models, function(x) length(coef(x))))) + 1
allroots <- c(coef(e_model),coef(m_model),0)
#allroots[5]=allroots[6]
allroots[6]=1
m_estimate(estFUN = dr_estFUN, data = data,
#roots = allroots,
#compute_roots = FALSE,
root_control = setup_root_control(start = allroots),
outer_args = list(models = models))
}
ACEreal=0
simdat2 = getdata(ACE=0, num.part=500)
geex_results <- estimate_dr(simdat2, X~Z1+Z2+Z3, Y~X+Z1+Z3+Z4)
L <- c(b0,b1,b2,b3,b0,1,b1,b3,b4,ACEreal)
Sigma <- vcov(geex_results)
sqrt(t(L) %*% Sigma %*% L)  # from GEEX
library(geex)
dr_estFUN <- function(data, models) {
X <- data$X
Y <- data$Y
Xe <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$e))
# Xm0 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m0))
# Xm1 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m1))
Xm <- grab_design_matrix(data=data, rhs_formula = grab_fixed_formula(models$m))
e_pos <- 1:ncol(Xe)
m_pos <- (max(e_pos)+1):(max(e_pos)+ncol(Xm))
#m0_pos <- (max(e_pos) + 1):(max(e_pos) + ncol(Xm0))
#m1_pos <- (max(m0_pos) + 1):(max(m0_pos) + ncol(Xm1))
e_scores <- grab_psiFUN(models$e, data)
m_scores <- grab_psiFUN(models$m, data)
#m0_scores <- grab_psiFUN(models$m0, data)
#m1_scores <- grab_psiFUN(models$m1, data)
function(theta) {
e <- plogis(Xe %*% theta[e_pos])
theta0 <- theta
theta0[6] = 0
m0 <- Xm %*% theta0[m_pos]
m1 <- Xm %*% theta[m_pos]
rd_hat <- (X * Y - (X - e) * m1) / e-((1 - X) * Y - (X - e) * m0) / (1 - e)
c(
e_scores(theta[e_pos]),m_scores(theta[m_pos]), rd_hat - theta[length(theta)]
# c(
#   e_scores(theta[e_pos]),m0_scores(theta[m0_pos]) * (X == 0),m1_scores(theta[m1_pos]) * (X == 1),rd_hat - theta[length(theta)]
)
}
}
estimate_dr <- function(data, propensity_formula, outcome_formula) {
e_model <- glm(propensity_formula, data = data, family = binomial)
m_model <- glm(outcome_formula, data=data)
#m0_model <- glm(outcome_formula, subset = (X == 0), data = data)
#m1_model <- glm(outcome_formula, subset = (X == 1), data = data)
models <- list(e=e_model, m=m_model)
#models <- list(e = e_model, m0 = m0_model, m1 = m1_model)
#nparms <- sum(unlist(lapply(models, function(x) length(coef(x))))) + 1
allroots <- c(coef(e_model),coef(m_model),0)
#allroots[5]=allroots[6]
allroots[6]=1
m_estimate(estFUN = dr_estFUN, data = data,
#roots = allroots,
#compute_roots = FALSE,
root_control = setup_root_control(start = rep(1,length(allroots))),
outer_args = list(models = models))
}
ACEreal=0
simdat2 = getdata(ACE=0, num.part=500)
geex_results <- estimate_dr(simdat2, X~Z1+Z2+Z3, Y~X+Z1+Z3+Z4)
L <- c(b0,b1,b2,b3,b0,1,b1,b3,b4,ACEreal)
Sigma <- vcov(geex_results)
sqrt(t(L) %*% Sigma %*% L)  # from GEEX
library(geex)
dr_estFUN <- function(data, models) {
X <- data$X
Y <- data$Y
Xe <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$e))
# Xm0 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m0))
# Xm1 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m1))
Xm <- grab_design_matrix(data=data, rhs_formula = grab_fixed_formula(models$m))
e_pos <- 1:ncol(Xe)
m_pos <- (max(e_pos)+1):(max(e_pos)+ncol(Xm))
#m0_pos <- (max(e_pos) + 1):(max(e_pos) + ncol(Xm0))
#m1_pos <- (max(m0_pos) + 1):(max(m0_pos) + ncol(Xm1))
e_scores <- grab_psiFUN(models$e, data)
m_scores <- grab_psiFUN(models$m, data)
#m0_scores <- grab_psiFUN(models$m0, data)
#m1_scores <- grab_psiFUN(models$m1, data)
function(theta) {
e <- plogis(Xe %*% theta[e_pos])
theta0 <- theta
theta0[6] = 0
m0 <- Xm %*% theta0[m_pos]
m1 <- Xm %*% theta[m_pos]
rd_hat <- (X * Y - (X - e) * m1) / e-((1 - X) * Y - (X - e) * m0) / (1 - e)
c(
e_scores(theta[e_pos]),m_scores(theta[m_pos]), rd_hat - theta[length(theta)]
# c(
#   e_scores(theta[e_pos]),m0_scores(theta[m0_pos]) * (X == 0),m1_scores(theta[m1_pos]) * (X == 1),rd_hat - theta[length(theta)]
)
}
}
estimate_dr <- function(data, propensity_formula, outcome_formula) {
e_model <- glm(propensity_formula, data = data, family = binomial)
m_model <- glm(outcome_formula, data=data)
#m0_model <- glm(outcome_formula, subset = (X == 0), data = data)
#m1_model <- glm(outcome_formula, subset = (X == 1), data = data)
models <- list(e=e_model, m=m_model)
#models <- list(e = e_model, m0 = m0_model, m1 = m1_model)
#nparms <- sum(unlist(lapply(models, function(x) length(coef(x))))) + 1
allroots <- c(coef(e_model),coef(m_model),0)
#allroots[5]=allroots[6]
allroots[6]=1
m_estimate(estFUN = dr_estFUN, data = data,
#roots = allroots,
#compute_roots = FALSE,
root_control = setup_root_control(start = rep(0,length(allroots))),
outer_args = list(models = models))
}
ACEreal=0
simdat2 = getdata(ACE=0, num.part=500)
geex_results <- estimate_dr(simdat2, X~Z1+Z2+Z3, Y~X+Z1+Z3+Z4)
L <- c(b0,b1,b2,b3,b0,1,b1,b3,b4,ACEreal)
Sigma <- vcov(geex_results)
sqrt(t(L) %*% Sigma %*% L)  # from GEEX
library(geex)
dr_estFUN <- function(data, models) {
X <- data$X
Y <- data$Y
Xe <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$e))
# Xm0 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m0))
# Xm1 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m1))
Xm <- grab_design_matrix(data=data, rhs_formula = grab_fixed_formula(models$m))
e_pos <- 1:ncol(Xe)
m_pos <- (max(e_pos)+1):(max(e_pos)+ncol(Xm))
#m0_pos <- (max(e_pos) + 1):(max(e_pos) + ncol(Xm0))
#m1_pos <- (max(m0_pos) + 1):(max(m0_pos) + ncol(Xm1))
e_scores <- grab_psiFUN(models$e, data)
m_scores <- grab_psiFUN(models$m, data)
#m0_scores <- grab_psiFUN(models$m0, data)
#m1_scores <- grab_psiFUN(models$m1, data)
function(theta) {
e <- plogis(Xe %*% theta[e_pos])
theta0 <- theta
theta0[6] = 0
m0 <- Xm %*% theta0[m_pos]
m1 <- Xm %*% theta[m_pos]
rd_hat <- (X * Y - (X - e) * m1) / e-((1 - X) * Y - (X - e) * m0) / (1 - e)
c(
e_scores(theta[e_pos]),m_scores(theta[m_pos]), rd_hat - theta[length(theta)]
# c(
#   e_scores(theta[e_pos]),m0_scores(theta[m0_pos]) * (X == 0),m1_scores(theta[m1_pos]) * (X == 1),rd_hat - theta[length(theta)]
)
}
}
estimate_dr <- function(data, propensity_formula, outcome_formula) {
e_model <- glm(propensity_formula, data = data, family = binomial)
m_model <- glm(outcome_formula, data=data)
#m0_model <- glm(outcome_formula, subset = (X == 0), data = data)
#m1_model <- glm(outcome_formula, subset = (X == 1), data = data)
models <- list(e=e_model, m=m_model)
#models <- list(e = e_model, m0 = m0_model, m1 = m1_model)
#nparms <- sum(unlist(lapply(models, function(x) length(coef(x))))) + 1
allroots <- c(coef(e_model),coef(m_model),0)
#allroots[5]=allroots[6]
allroots[6]=1
m_estimate(estFUN = dr_estFUN, data = data,
#roots = allroots,
#compute_roots = FALSE,
root_control = setup_root_control(start = rep(0,length(allroots))),
outer_args = list(models = models))
}
ACEreal=0
simdat2 = getdata(ACE=0, num.part=1000)
geex_results <- estimate_dr(simdat2, X~Z1+Z2+Z3, Y~X+Z1+Z3+Z4)
L <- c(b0,b1,b2,b3,b0,1,b1,b3,b4,ACEreal)
Sigma <- vcov(geex_results)
sqrt(t(L) %*% Sigma %*% L)  # from GEEX
library(geex)
dr_estFUN <- function(data, models) {
X <- data$X
Y <- data$Y
Xe <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$e))
# Xm0 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m0))
# Xm1 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m1))
Xm <- grab_design_matrix(data=data, rhs_formula = grab_fixed_formula(models$m))
e_pos <- 1:ncol(Xe)
m_pos <- (max(e_pos)+1):(max(e_pos)+ncol(Xm))
#m0_pos <- (max(e_pos) + 1):(max(e_pos) + ncol(Xm0))
#m1_pos <- (max(m0_pos) + 1):(max(m0_pos) + ncol(Xm1))
e_scores <- grab_psiFUN(models$e, data)
m_scores <- grab_psiFUN(models$m, data)
#m0_scores <- grab_psiFUN(models$m0, data)
#m1_scores <- grab_psiFUN(models$m1, data)
function(theta) {
e <- plogis(Xe %*% theta[e_pos])
theta0 <- theta
theta0[6] = 0
m0 <- Xm %*% theta0[m_pos]
m1 <- Xm %*% theta[m_pos]
rd_hat <- (X * Y - (X - e) * m1) / e-((1 - X) * Y - (X - e) * m0) / (1 - e)
c(
e_scores(theta[e_pos]),m_scores(theta[m_pos]), rd_hat - theta[length(theta)])
# c(
#   e_scores(theta[e_pos]),m0_scores(theta[m0_pos]) * (X == 0),m1_scores(theta[m1_pos]) * (X == 1),rd_hat - theta[length(theta)]
}
}
estimate_dr <- function(data, propensity_formula, outcome_formula) {
e_model <- glm(propensity_formula, data = data, family = binomial)
m_model <- glm(outcome_formula, data=data)
#m0_model <- glm(outcome_formula, subset = (X == 0), data = data)
#m1_model <- glm(outcome_formula, subset = (X == 1), data = data)
models <- list(e=e_model, m=m_model)
#models <- list(e = e_model, m0 = m0_model, m1 = m1_model)
#nparms <- sum(unlist(lapply(models, function(x) length(coef(x))))) + 1
allroots <- c(coef(e_model),coef(m_model),0)
#allroots[5]=allroots[6]
allroots[6]=1
m_estimate(estFUN = dr_estFUN, data = data,
#roots = allroots,
#compute_roots = FALSE,
root_control = setup_root_control(start = rep(0,length(allroots))),
outer_args = list(models = models))
}
ACEreal=0
simdat2 = getdata(ACE=0, num.part=500)
library(Rlab)
library(stats)
library(boot)
library(readr)
nrep=1000
#size = 1000
b0 = 1.5
b1 = 1
b2 = -2
b3 = 1
b4 = 2
getdata <- function(ACE,num.part){
#generate the sample
part.id<-seq(1:num.part)
#covariates
Z1<-as.vector(rnorm(num.part, mean = 0, sd = 1))
simdat1<-as.data.frame(cbind(part.id,Z1))
simdat1$Z2<-rbinom(num.part, 1, inv.logit(0.2-.02*simdat1$Z1) )
simdat1$Z3 = rbern(num.part,0.3)
simdat1$Z4 = rnorm(num.part,0,1)
#true models
simdat1$ps = inv.logit(b0 + b1*simdat1$Z1 + b2*simdat1$Z2 + b3*simdat1$Z3)
simdat1$EY = b1*simdat1$Z1 + b3*simdat1$Z3 + b4*simdat1$Z4
simdat1$X<-rbinom(num.part,1,simdat1$ps)
#create potential outcomes
simdat1$Y0<- rnorm(num.part, mean =simdat1$EY, sd=1)
simdat1$Y1<- rnorm(num.part, mean =simdat1$EY+ACE, sd=1)
#assign observed outcome
simdat1$Y<-ifelse(simdat1$X==0,simdat1$Y0,simdat1$Y1)
return(simdat1)
}
library(geex)
dr_estFUN <- function(data, models) {
X <- data$X
Y <- data$Y
Xe <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$e))
# Xm0 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m0))
# Xm1 <- grab_design_matrix(data = data,rhs_formula = grab_fixed_formula(models$m1))
Xm <- grab_design_matrix(data=data, rhs_formula = grab_fixed_formula(models$m))
e_pos <- 1:ncol(Xe)
m_pos <- (max(e_pos)+1):(max(e_pos)+ncol(Xm))
#m0_pos <- (max(e_pos) + 1):(max(e_pos) + ncol(Xm0))
#m1_pos <- (max(m0_pos) + 1):(max(m0_pos) + ncol(Xm1))
e_scores <- grab_psiFUN(models$e, data)
m_scores <- grab_psiFUN(models$m, data)
#m0_scores <- grab_psiFUN(models$m0, data)
#m1_scores <- grab_psiFUN(models$m1, data)
function(theta) {
e <- plogis(Xe %*% theta[e_pos])
theta0 <- theta
theta0[6] = 0
m0 <- Xm %*% theta0[m_pos]
m1 <- Xm %*% theta[m_pos]
rd_hat <- (X * Y - (X - e) * m1) / e-((1 - X) * Y - (X - e) * m0) / (1 - e)
c(
e_scores(theta[e_pos]),m_scores(theta[m_pos]), rd_hat - theta[length(theta)])
# c(
#   e_scores(theta[e_pos]),m0_scores(theta[m0_pos]) * (X == 0),m1_scores(theta[m1_pos]) * (X == 1),rd_hat - theta[length(theta)]
}
}
estimate_dr <- function(data, propensity_formula, outcome_formula) {
e_model <- glm(propensity_formula, data = data, family = binomial)
m_model <- glm(outcome_formula, data=data)
#m0_model <- glm(outcome_formula, subset = (X == 0), data = data)
#m1_model <- glm(outcome_formula, subset = (X == 1), data = data)
models <- list(e=e_model, m=m_model)
#models <- list(e = e_model, m0 = m0_model, m1 = m1_model)
#nparms <- sum(unlist(lapply(models, function(x) length(coef(x))))) + 1
allroots <- c(coef(e_model),coef(m_model),0)
#allroots[5]=allroots[6]
allroots[6]=1
m_estimate(estFUN = dr_estFUN, data = data,
#roots = allroots,
#compute_roots = FALSE,
root_control = setup_root_control(start = rep(0,length(allroots))),
outer_args = list(models = models))
}
ACEreal=0
simdat2 = getdata(ACE=0, num.part=500)
geex_results <- estimate_dr(simdat2, X~Z1+Z2+Z3, Y~X+Z1+Z3+Z4)
L <- c(b0,b1,b2,b3,b0,1,b1,b3,b4,ACEreal)
Sigma <- vcov(geex_results)
sqrt(Sigma[ncol(Sigma),ncol(Sigma)])
#sqrt(t(L) %*% Sigma %*% L)  # from GEEX
View(simdat2)
View(simdat2)
View(geex_results)
View(geex_results)
library(ggplot2);
df <- read.csv("mbti_df.csv", header=TRUE,sep=',');
df[,3:ncol(df)] <- lapply(df[,3:ncol(df)],as.numeric);
df$type1 <- substring(df$mbti,1,1);
df$type2 <- substring(df$mbti,2,2);
df$type3 <- substring(df$mbti,3,3);
df$type4 <- substring(df$mbti,4,4);
majors <- df[, grepl("Major", names(df))];
df$majorcount <- rowSums(majors);
minors <- df[, grepl("minor", names(df))];
df$minorcount <- rowSums(minors);
df2 <- cbind(df[,1:2],df[,47:52],df[, grepl("mean", names(df))]);
df2$pminor = df2$minorcount / (df2$majorcount+df2$minorcount)
write.csv(df2,file="derived_data/new_mbti_df.csv",row.names = FALSE)
setwd("C:\Users\karie\Documents\UNCgrad\611\myproject")
setwd("C:/Users/karie/Documents/UNCgrad/611/myproject")
library(ggplot2);
df <- read.csv("mbti_df.csv", header=TRUE,sep=',');
df[,3:ncol(df)] <- lapply(df[,3:ncol(df)],as.numeric);
df$type1 <- substring(df$mbti,1,1);
df$type2 <- substring(df$mbti,2,2);
df$type3 <- substring(df$mbti,3,3);
df$type4 <- substring(df$mbti,4,4);
majors <- df[, grepl("Major", names(df))];
df$majorcount <- rowSums(majors);
minors <- df[, grepl("minor", names(df))];
df$minorcount <- rowSums(minors);
df2 <- cbind(df[,1:2],df[,47:52],df[, grepl("mean", names(df))]);
df2$pminor = df2$minorcount / (df2$majorcount+df2$minorcount)
write.csv(df2,file="derived_data/new_mbti_df.csv",row.names = FALSE)
library(ggplot2);
source("simplifydf.R");
df2 <- read.csv("derived_data/new_mbti_df.csv", header=TRUE,sep=',')
plot1 <- ggplot(df2)+
geom_boxplot(aes(pminor))+
facet_grid(~mbti);
saveRDS(plot1, file="figure_rds/plot1.rds");
plot1 <- readRDS("C:/Users/karie/Documents/UNCgrad/611/myproject/figure_rds/plot1.rds")
View(plot1)
ggplot(df2)+
geom_boxplot(aes(pminor))+
facet_grid(~mbti)
ggplot(df2)+
geom_boxplot(aes(pminor))+
facet_grid(~mbti,nrow=4)
ggplot(df2)+
geom_boxplot(aes(pminor))+
facet_grid(~mbti,nrow=4)
ggplot(df2)+
geom_boxplot(aes(pminor))+
facet_wrap(~mbti,nrow=4)
saveRDS(plot1, file="figure_rds/plot1.rds");
ggplot(df2)+
geom_boxplot(aes(pminor))+
facet_wrap(~mbti,nrow=4)+
xlab("Percent distribution of minor chords in playlists")
ggplot(df2)+
geom_histogram(aes(pminor))+
facet_wrap(~type3)
df2$type3 = ifelse(TRUE,"T","F");
ggplot(df2)+
geom_histogram(aes(pminor,fill=type3))+
facet_wrap(~type3,nrow=2)
df2$type3 = ifelse("TRUE","T","F");
ggplot(df2)+
geom_histogram(aes(pminor,fill=type3))+
facet_wrap(~type3,nrow=2)
library(ggplot2);
source("simplifydf.R");
df2 <- read.csv("derived_data/new_mbti_df.csv", header=TRUE,sep=',')
df2$type3 = ifelse("TRUE","T","F");
plot1 <- ggplot(df2)+
geom_boxplot(aes(pminor))+
facet_wrap(~mbti,nrow=4)+
xlab("Percent distribution of minor chords");
saveRDS(plot1, file="figure_rds/plot1.rds");
plot2 <- ggplot(df2)+
geom_histogram(aes(pminor,fill=type3))+
facet_wrap(~type3,nrow=2)
ggplot(df2)+
geom_histogram(aes(pminor,fill=type3))+
facet_wrap(~type3,nrow=2)
df2 <- read.csv("derived_data/new_mbti_df.csv", header=TRUE,sep=',')
attr(df2$type3)
head(df2$type3)
df2$type3 = ifelse(df2$type3==TRUE,"T","F");
ggplot(df2)+
geom_histogram(aes(pminor,fill=type3))+
facet_wrap(~type3,nrow=2)
library(ggplot2);
source("simplifydf.R");
df2 <- read.csv("derived_data/new_mbti_df.csv", header=TRUE,sep=',')
df2$type3 = ifelse(df2$type3==TRUE,"T","F");
plot1 <- ggplot(df2)+
geom_boxplot(aes(pminor))+
facet_wrap(~mbti,nrow=4)+
xlab("Percent distribution of minor chords");
saveRDS(plot1, file="figure_rds/plot1.rds");
plot2 <- ggplot(df2)+
geom_histogram(aes(pminor,fill=type3))+
facet_wrap(~type3,nrow=2)+
theme(legend.position = "none");
saveRDS(plot2, file="figure_rds/plot2.rds");
ggplot(df2)+
geom_boxplot(aes(pminor))+
facet_wrap(~mbti,nrow=4)+
xlab("Percent distribution of minor chords")
ggplot(df2)+
geom_histogram(aes(pminor,fill=type3))+
facet_wrap(~type3,nrow=2)+
theme(legend.position = "none")+
xlab("Percent distribution of minor chords")
